/* stylelint-disable */
// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$instagram-name: "instagram";
$instagram-x: 79px;
$instagram-y: 0;
$instagram-offset-x: -79px;
$instagram-offset-y: 0;
$instagram-width: 60px;
$instagram-height: 60px;
$instagram-total-width: 139px;
$instagram-total-height: 139px;
$instagram-image: "../images/icons/sprite.png";
$instagram: (
  79px,
  0,
  -79px,
  0,
  60px,
  60px,
  139px,
  139px,
  "../images/icons/sprite.png",
  "instagram"
);
$light-name: "light";
$light-x: 0;
$light-y: 0;
$light-offset-x: 0;
$light-offset-y: 0;
$light-width: 64px;
$light-height: 64px;
$light-total-width: 139px;
$light-total-height: 139px;
$light-image: "../images/icons/sprite.png";
$light: (
  0,
  0,
  0,
  0,
  64px,
  64px,
  139px,
  139px,
  "../images/icons/sprite.png",
  "light"
);
$play-name: "play";
$play-x: 0;
$play-y: 79px;
$play-offset-x: 0;
$play-offset-y: -79px;
$play-width: 60px;
$play-height: 60px;
$play-total-width: 139px;
$play-total-height: 139px;
$play-image: "../images/icons/sprite.png";
$play: (
  0,
  79px,
  0,
  -79px,
  60px,
  60px,
  139px,
  139px,
  "../images/icons/sprite.png",
  "play"
);
$spritesheet-width: 139px;
$spritesheet-height: 139px;
$spritesheet-image: "../images/icons/sprite.png";
$spritesheet-sprites: ($instagram, $light, $play);
$spritesheet: (
  139px,
  139px,
  "../images/icons/sprite.png",
  $spritesheet-sprites
);

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);

  background-position: $sprite-offset-x $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);

  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);

    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
